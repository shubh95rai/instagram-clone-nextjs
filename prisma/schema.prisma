generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String? @unique
  avatar   String?
  username String? @unique
  name     String?
  subtitle String?
  bio      String?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts   Account[]
  profile    Profile?
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  bookmarks  Bookmark[]
  followers  Follow[]   @relation("followers")
  followings Follow[]   @relation("followings")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String     @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())

  // Relations
  postId   String @db.ObjectId
  authorId String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  postId   String @db.ObjectId
  authorId String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Follow {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  followerId  String @db.ObjectId // sessionEmail id
  followingId String @db.ObjectId // to whom i am followinf id
  follower    User   @relation(fields: [followerId], references: [id], onDelete: Cascade, "followers")
  following   User   @relation(fields: [followingId], references: [id], onDelete: Cascade, "followings")
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  postId String @db.ObjectId
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
